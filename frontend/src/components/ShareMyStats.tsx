import React, { useState } from 'react';
import { Share2, Download, Camera } from 'lucide-react';
import html2canvas from 'html2canvas';

interface ShareMyStatsProps {
  theme: 'light' | 'dark';
  weeklyData: {
    totalTrades: number;
    profitableTrades: number;
    totalProfit: number;
    winRate: number;
    topSymbol: string;
    dominantSentiment: string;
  };
}

const ShareMyStats: React.FC<ShareMyStatsProps> = ({ theme, weeklyData }) => {
  const [generating, setGenerating] = useState(false);

  const generateWeeklySummary = async () => {
    setGenerating(true);
    
    try {
      // Call backend to generate AI summary
      const response = await fetch('/api/summarize-week', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          trade_data: [
            {
              symbol: weeklyData.topSymbol,
              sentiment: weeklyData.dominantSentiment,
              result: weeklyData.winRate > 50 ? 'profit' : 'loss'
            }
          ]
        })
      });
      
      if (response.ok) {
        const data = await response.json();
        return data.summary;
      }
    } catch (error) {
      console.error('Error generating summary:', error);
    }
    
    return `This week I completed ${weeklyData.totalTrades} trades with a ${weeklyData.winRate.toFixed(1)}% win rate. My most traded symbol was ${weeklyData.topSymbol} with ${weeklyData.dominantSentiment} sentiment dominating my decisions.`;
  };

  const generateShareImage = async () => {
    setGenerating(true);
    
    try {
      const summary = await generateWeeklySummary();
      
      // Create a temporary div with the stats layout
      const tempDiv = document.createElement('div');
      tempDiv.style.position = 'absolute';
      tempDiv.style.left = '-9999px';
      tempDiv.style.width = '600px';
      tempDiv.style.padding = '40px';
      tempDiv.style.fontFamily = 'Arial, sans-serif';
      tempDiv.style.background = theme === 'dark' ? '#1f2937' : '#ffffff';
      tempDiv.style.color = theme === 'dark' ? '#ffffff' : '#000000';
      tempDiv.style.borderRadius = '12px';
      tempDiv.style.border = theme === 'dark' ? '1px solid #374151' : '1px solid #e5e7eb';
      
      tempDiv.innerHTML = `
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="margin: 0; font-size: 28px; font-weight: bold; color: #3b82f6;">
            Synapse Risk-Coach Pro
          </h1>
          <p style="margin: 10px 0 0 0; font-size: 16px; opacity: 0.8;">
            Weekly Trading Report
          </p>
        </div>
        
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 30px;">
          <div style="text-align: center; padding: 20px; background: ${theme === 'dark' ? '#374151' : '#f9fafb'}; border-radius: 8px;">
            <div style="font-size: 32px; font-weight: bold; color: #10b981;">${weeklyData.totalTrades}</div>
            <div style="font-size: 14px; opacity: 0.8;">Total Trades</div>
          </div>
          <div style="text-align: center; padding: 20px; background: ${theme === 'dark' ? '#374151' : '#f9fafb'}; border-radius: 8px;">
            <div style="font-size: 32px; font-weight: bold; color: #3b82f6;">${weeklyData.winRate.toFixed(1)}%</div>
            <div style="font-size: 14px; opacity: 0.8;">Win Rate</div>
          </div>
          <div style="text-align: center; padding: 20px; background: ${theme === 'dark' ? '#374151' : '#f9fafb'}; border-radius: 8px;">
            <div style="font-size: 32px; font-weight: bold; color: #f59e0b;">${weeklyData.topSymbol}</div>
            <div style="font-size: 14px; opacity: 0.8;">Top Symbol</div>
          </div>
          <div style="text-align: center; padding: 20px; background: ${theme === 'dark' ? '#374151' : '#f9fafb'}; border-radius: 8px;">
            <div style="font-size: 32px; font-weight: bold; color: #8b5cf6;">${weeklyData.profitableTrades}</div>
            <div style="font-size: 14px; opacity: 0.8;">Profitable</div>
          </div>
        </div>
        
        <div style="padding: 20px; background: ${theme === 'dark' ? '#374151' : '#f9fafb'}; border-radius: 8px; margin-bottom: 20px;">
          <h3 style="margin: 0 0 15px 0; font-size: 18px; font-weight: bold;">AI Summary</h3>
          <p style="margin: 0; font-size: 14px; line-height: 1.6; opacity: 0.9;">
            ${summary}
          </p>
        </div>
        
        <div style="text-align: center; font-size: 12px; opacity: 0.6;">
          Generated by Synapse Risk-Coach Pro â€¢ ${new Date().toLocaleDateString()}
        </div>
      `;
      
      document.body.appendChild(tempDiv);
      
      // Generate canvas from the div
      const canvas = await html2canvas(tempDiv, {
        backgroundColor: theme === 'dark' ? '#1f2937' : '#ffffff',
        scale: 2,
        useCORS: true
      });
      
      // Remove temporary div
      document.body.removeChild(tempDiv);
      
      // Convert to blob
      canvas.toBlob(async (blob) => {
        if (blob) {
          // Try to use native sharing if available
          const file = new File([blob], 'trading-stats.png', { type: 'image/png' });
          if (navigator.share && navigator.canShare && navigator.canShare({ files: [file] })) {
            try {
              await navigator.share({
                title: 'My Trading Stats',
                text: 'Check out my weekly trading performance!',
                files: [file]
              });
            } catch (error) {
              console.log('Native sharing failed, falling back to download');
              downloadImage(blob);
            }
          } else {
            // Fallback to download
            downloadImage(blob);
          }
        }
      }, 'image/png');
      
    } catch (error) {
      console.error('Error generating share image:', error);
    } finally {
      setGenerating(false);
    }
  };

  const downloadImage = (blob: Blob) => {
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `trading-stats-${new Date().toISOString().split('T')[0]}.png`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const copyStatsToClipboard = async () => {
    const summary = await generateWeeklySummary();
    const text = `ðŸ“Š My Trading Week Summary\n\n` +
                `ðŸŽ¯ Total Trades: ${weeklyData.totalTrades}\n` +
                `ðŸ“ˆ Win Rate: ${weeklyData.winRate.toFixed(1)}%\n` +
                `ðŸ’° Profitable Trades: ${weeklyData.profitableTrades}\n` +
                `ðŸ”¥ Top Symbol: ${weeklyData.topSymbol}\n\n` +
                `${summary}\n\n` +
                `#Trading #Forex #SynapseRiskCoach`;
    
    try {
      await navigator.clipboard.writeText(text);
      alert('Stats copied to clipboard!');
    } catch (error) {
      console.error('Failed to copy to clipboard:', error);
    }
  };

  return (
    <div className={`p-4 rounded-lg ${
      theme === 'dark' 
        ? 'bg-gray-800 border border-gray-700' 
        : 'bg-white border border-gray-200'
    }`}>
      <h3 className="text-lg font-semibold mb-4 flex items-center">
        <Share2 className="w-5 h-5 mr-2" />
        Share My Stats
      </h3>
      
      <div className="grid grid-cols-2 gap-4 mb-4">
        <div className={`p-3 rounded text-center ${
          theme === 'dark' ? 'bg-gray-700' : 'bg-gray-50'
        }`}>
          <div className="text-2xl font-bold text-green-500">{weeklyData.totalTrades}</div>
          <div className="text-sm opacity-75">Total Trades</div>
        </div>
        <div className={`p-3 rounded text-center ${
          theme === 'dark' ? 'bg-gray-700' : 'bg-gray-50'
        }`}>
          <div className="text-2xl font-bold text-blue-500">{weeklyData.winRate.toFixed(1)}%</div>
          <div className="text-sm opacity-75">Win Rate</div>
        </div>
        <div className={`p-3 rounded text-center ${
          theme === 'dark' ? 'bg-gray-700' : 'bg-gray-50'
        }`}>
          <div className="text-2xl font-bold text-yellow-500">{weeklyData.topSymbol}</div>
          <div className="text-sm opacity-75">Top Symbol</div>
        </div>
        <div className={`p-3 rounded text-center ${
          theme === 'dark' ? 'bg-gray-700' : 'bg-gray-50'
        }`}>
          <div className="text-2xl font-bold text-purple-500">{weeklyData.profitableTrades}</div>
          <div className="text-sm opacity-75">Profitable</div>
        </div>
      </div>
      
      <div className="space-y-2">
        <button
          onClick={generateShareImage}
          disabled={generating}
          className="w-full flex items-center justify-center space-x-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
        >
          <Camera className="w-4 h-4" />
          <span>{generating ? 'Generating...' : 'Generate & Share Image'}</span>
        </button>
        
        <button
          onClick={copyStatsToClipboard}
          className="w-full flex items-center justify-center space-x-2 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
        >
          <Download className="w-4 h-4" />
          <span>Copy Stats Text</span>
        </button>
      </div>
    </div>
  );
};

export default ShareMyStats;

